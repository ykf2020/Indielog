{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/delete\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n/**\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Delete extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Delete';\n  }\n\n  init() {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n    view.addObserver(DeleteObserver);\n    const deleteForwardCommand = new DeleteCommand(editor, 'forward'); // Register `deleteForward` command and add `forwardDelete` command as an alias for backward compatibility.\n\n    editor.commands.add('deleteForward', deleteForwardCommand);\n    editor.commands.add('forwardDelete', deleteForwardCommand);\n    editor.commands.add('delete', new DeleteCommand(editor, 'backward'));\n    this.listenTo(viewDocument, 'delete', (evt, data) => {\n      const deleteCommandParams = {\n        unit: data.unit,\n        sequence: data.sequence\n      }; // If a specific (view) selection to remove was set, convert it to a model selection and set as a parameter for `DeleteCommand`.\n\n      if (data.selectionToRemove) {\n        const modelSelection = editor.model.createSelection();\n        const ranges = [];\n\n        for (const viewRange of data.selectionToRemove.getRanges()) {\n          ranges.push(editor.editing.mapper.toModelRange(viewRange));\n        }\n\n        modelSelection.setTo(ranges);\n        deleteCommandParams.selection = modelSelection;\n      }\n\n      editor.execute(data.direction == 'forward' ? 'deleteForward' : 'delete', deleteCommandParams);\n      data.preventDefault();\n      view.scrollToTheSelection();\n    }, {\n      priority: 'low'\n    }); // Android IMEs have a quirk - they change DOM selection after the input changes were performed by the browser.\n    // This happens on `keyup` event. Android doesn't know anything about our deletion and selection handling. Even if the selection\n    // was changed during input events, IME remembers the position where the selection \"should\" be placed and moves it there.\n    //\n    // To prevent incorrect selection, we save the selection after deleting here and then re-set it on `keyup`. This has to be done\n    // on DOM selection level, because on `keyup` the model selection is still the same as it was just after deletion, so it\n    // wouldn't be changed and the fix would do nothing.\n    //\n\n    if (env.isAndroid) {\n      let domSelectionAfterDeletion = null;\n      this.listenTo(viewDocument, 'delete', (evt, data) => {\n        const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n        domSelectionAfterDeletion = {\n          anchorNode: domSelection.anchorNode,\n          anchorOffset: domSelection.anchorOffset,\n          focusNode: domSelection.focusNode,\n          focusOffset: domSelection.focusOffset\n        };\n      }, {\n        priority: 'lowest'\n      });\n      this.listenTo(viewDocument, 'keyup', (evt, data) => {\n        if (domSelectionAfterDeletion) {\n          const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n          domSelection.collapse(domSelectionAfterDeletion.anchorNode, domSelectionAfterDeletion.anchorOffset);\n          domSelection.extend(domSelectionAfterDeletion.focusNode, domSelectionAfterDeletion.focusOffset);\n          domSelectionAfterDeletion = null;\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/fanyukun/Documents/react/indielog/node_modules/@ckeditor/ckeditor5-typing/src/delete.js"],"names":["Plugin","DeleteCommand","DeleteObserver","env","Delete","pluginName","init","editor","view","editing","viewDocument","document","addObserver","deleteForwardCommand","commands","add","listenTo","evt","data","deleteCommandParams","unit","sequence","selectionToRemove","modelSelection","model","createSelection","ranges","viewRange","getRanges","push","mapper","toModelRange","setTo","selection","execute","direction","preventDefault","scrollToTheSelection","priority","isAndroid","domSelectionAfterDeletion","domSelection","domTarget","ownerDocument","defaultView","getSelection","anchorNode","anchorOffset","focusNode","focusOffset","collapse","extend"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/delete\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Delete extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Delete';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( DeleteObserver );\n\n\t\tconst deleteForwardCommand = new DeleteCommand( editor, 'forward' );\n\n\t\t// Register `deleteForward` command and add `forwardDelete` command as an alias for backward compatibility.\n\t\teditor.commands.add( 'deleteForward', deleteForwardCommand );\n\t\teditor.commands.add( 'forwardDelete', deleteForwardCommand );\n\n\t\teditor.commands.add( 'delete', new DeleteCommand( editor, 'backward' ) );\n\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tconst deleteCommandParams = { unit: data.unit, sequence: data.sequence };\n\n\t\t\t// If a specific (view) selection to remove was set, convert it to a model selection and set as a parameter for `DeleteCommand`.\n\t\t\tif ( data.selectionToRemove ) {\n\t\t\t\tconst modelSelection = editor.model.createSelection();\n\t\t\t\tconst ranges = [];\n\n\t\t\t\tfor ( const viewRange of data.selectionToRemove.getRanges() ) {\n\t\t\t\t\tranges.push( editor.editing.mapper.toModelRange( viewRange ) );\n\t\t\t\t}\n\n\t\t\t\tmodelSelection.setTo( ranges );\n\n\t\t\t\tdeleteCommandParams.selection = modelSelection;\n\t\t\t}\n\n\t\t\teditor.execute( data.direction == 'forward' ? 'deleteForward' : 'delete', deleteCommandParams );\n\n\t\t\tdata.preventDefault();\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\t// Android IMEs have a quirk - they change DOM selection after the input changes were performed by the browser.\n\t\t// This happens on `keyup` event. Android doesn't know anything about our deletion and selection handling. Even if the selection\n\t\t// was changed during input events, IME remembers the position where the selection \"should\" be placed and moves it there.\n\t\t//\n\t\t// To prevent incorrect selection, we save the selection after deleting here and then re-set it on `keyup`. This has to be done\n\t\t// on DOM selection level, because on `keyup` the model selection is still the same as it was just after deletion, so it\n\t\t// wouldn't be changed and the fix would do nothing.\n\t\t//\n\t\tif ( env.isAndroid ) {\n\t\t\tlet domSelectionAfterDeletion = null;\n\n\t\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\tdomSelectionAfterDeletion = {\n\t\t\t\t\tanchorNode: domSelection.anchorNode,\n\t\t\t\t\tanchorOffset: domSelection.anchorOffset,\n\t\t\t\t\tfocusNode: domSelection.focusNode,\n\t\t\t\t\tfocusOffset: domSelection.focusOffset\n\t\t\t\t};\n\t\t\t}, { priority: 'lowest' } );\n\n\t\t\tthis.listenTo( viewDocument, 'keyup', ( evt, data ) => {\n\t\t\t\tif ( domSelectionAfterDeletion ) {\n\t\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\t\tdomSelection.collapse( domSelectionAfterDeletion.anchorNode, domSelectionAfterDeletion.anchorOffset );\n\t\t\t\t\tdomSelection.extend( domSelectionAfterDeletion.focusNode, domSelectionAfterDeletion.focusOffset );\n\n\t\t\t\t\tdomSelectionAfterDeletion = null;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}