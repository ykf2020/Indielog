{"ast":null,"code":"var _jsxFileName = \"/Users/fanyukun/Documents/react/indielog/src/components/Controls/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SignPanel from '../SignPanel';\nimport Header from '../Header';\nimport SideBar from '../SideBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Controls = () => {\n  _s();\n\n  const user = useSelector(store => store.user.currentUser);\n  const [isOpenSideBar, setIsOpenSideBar] = useState(false);\n\n  function toggleSideBar() {\n    setIsOpenSideBar(!isOpenSideBar);\n  }\n\n  const [isOpenSignPanel, setIsOpenSignPanel] = useState(false);\n\n  function toggleSignPanel() {\n    setIsOpenSignPanel(!isOpenSignPanel);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isOpenSignPanel && !user && /*#__PURE__*/_jsxDEV(SignPanel, {\n      isOpenSignPanel: isOpenSignPanel,\n      toggleSignPanel: toggleSignPanel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      isOpenSignPanel: isOpenSignPanel,\n      toggleSignPanel: toggleSignPanel,\n      toggleSideBar: toggleSideBar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(SideBar, {\n      toggleSignPanel: toggleSignPanel,\n      isOpenSideBar: isOpenSideBar,\n      toggleSideBar: toggleSideBar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Controls, \"Q7EUrvdv1R05akZ0RqrVVqofjok=\", false, function () {\n  return [useSelector];\n});\n\n_c = Controls;\nexport default Controls;\n\nvar _c;\n\n$RefreshReg$(_c, \"Controls\");","map":{"version":3,"sources":["/Users/fanyukun/Documents/react/indielog/src/components/Controls/index.js"],"names":["useState","useEffect","useDispatch","useSelector","SignPanel","Header","SideBar","Controls","user","store","currentUser","isOpenSideBar","setIsOpenSideBar","toggleSideBar","isOpenSignPanel","setIsOpenSignPanel","toggleSignPanel"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,OAAP,MAAoB,YAApB;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAMC,IAAI,GAAGL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACD,IAAN,CAAWE,WAAvB,CAAxB;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,KAAD,CAAlD;;AACA,WAASa,aAAT,GAAwB;AACtBD,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACD;;AAED,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,KAAD,CAAtD;;AACA,WAASgB,eAAT,GAA0B;AACxBD,IAAAA,kBAAkB,CAAC,CAACD,eAAF,CAAlB;AACD;;AAED,sBACE;AAAA,eACEA,eAAe,IAAI,CAACN,IAArB,iBACC,QAAC,SAAD;AACA,MAAA,eAAe,EAAEM,eADjB;AAEA,MAAA,eAAe,EAAEE;AAFjB;AAAA;AAAA;AAAA;AAAA,YAFF,eAOA,QAAC,MAAD;AACE,MAAA,eAAe,EAAEF,eADnB;AAEE,MAAA,eAAe,EAAEE,eAFnB;AAGE,MAAA,aAAa,EAAEH;AAHjB;AAAA;AAAA;AAAA;AAAA,YAPA,eAYA,QAAC,OAAD;AACE,MAAA,eAAe,EAAEG,eADnB;AAEE,MAAA,aAAa,EAAEL,aAFjB;AAGE,MAAA,aAAa,EAAEE;AAHjB;AAAA;AAAA;AAAA;AAAA,YAZA;AAAA,kBADF;AAoBD,CAhCD;;GAAMN,Q;UACSJ,W;;;KADTI,Q;AAkCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport SignPanel from '../SignPanel'\nimport Header from '../Header'\nimport SideBar from '../SideBar'\n\nconst Controls = () => {\n  const user = useSelector((store) => store.user.currentUser)\n  const [isOpenSideBar, setIsOpenSideBar] = useState(false)\n  function toggleSideBar(){\n    setIsOpenSideBar(!isOpenSideBar)\n  }\n\n  const [isOpenSignPanel, setIsOpenSignPanel] = useState(false)\n  function toggleSignPanel(){\n    setIsOpenSignPanel(!isOpenSignPanel)\n  }\n\n  return (\n    <>\n    {(isOpenSignPanel && !user) &&\n      <SignPanel\n      isOpenSignPanel={isOpenSignPanel}\n      toggleSignPanel={toggleSignPanel}\n      />\n    }\n    <Header\n      isOpenSignPanel={isOpenSignPanel}\n      toggleSignPanel={toggleSignPanel}\n      toggleSideBar={toggleSideBar}\n    />\n    <SideBar\n      toggleSignPanel={toggleSignPanel}\n      isOpenSideBar={isOpenSideBar}\n      toggleSideBar={toggleSideBar}\n    />\n    </>\n  )\n}\n\nexport default Controls\n"]},"metadata":{},"sourceType":"module"}