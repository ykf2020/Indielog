{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { getPost as getPostAPI, addPost, deletePost as deletePostAPI, editPost as editPostAPI } from \"../../WebAPI.js\";\nconst initialState = {\n  isLoadingPost: false,\n  post: {},\n  newPostResponse: null,\n  editPostResponse: null\n};\nexport const postReducer = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    setIsLoadingPost: (state, action) => {\n      state.isLoadingPost = action.payload;\n    },\n    setPost: (state, action) => {\n      state.post = action.payload;\n    },\n    setNewPostResponse: (state, action) => {\n      state.newPostResponse = action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  setIsLoadingPost,\n  setPost,\n  setNewPostResponse\n} = postReducer.actions;\nexport const getPost = id => dispatch => {\n  dispatch(setIsLoadingPost(true));\n  getPostAPI(id).then(res => {\n    dispatch(setPost(res));\n    dispatch(setIsLoadingPost(false));\n  });\n};\nexport const newPost = (title, body) => dispatch => {\n  dispatch(setIsLoadingPost(true));\n  addPost(title, body).then(res => {\n    dispatch(setNewPostResponse(res));\n    dispatch(setIsLoadingPost(false));\n  });\n};\nexport const editPost = (id, editTitle, editBody) => dispatch => {\n  dispatch(setIsLoadingPost(true));\n  editPostAPI(id, editTitle, editBody).then(res => {\n    dispatch(setPost(res));\n    dispatch(setIsLoadingPost(false));\n  });\n};\nexport const deletePost = id => dispatch => {\n  return deletePostAPI(id).then(res => {\n    return res;\n  });\n};\nexport default postReducer.reducer;","map":{"version":3,"sources":["/Users/fanyukun/Documents/react/indielog/src/redux/reducers/postReducer.js"],"names":["createSlice","getPost","getPostAPI","addPost","deletePost","deletePostAPI","editPost","editPostAPI","initialState","isLoadingPost","post","newPostResponse","editPostResponse","postReducer","name","reducers","setIsLoadingPost","state","action","payload","setPost","setNewPostResponse","actions","id","dispatch","then","res","newPost","title","body","editTitle","editBody","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SACEC,OAAO,IAAIC,UADb,EAEEC,OAFF,EAGEC,UAAU,IAAIC,aAHhB,EAIEC,QAAQ,IAAIC,WAJd,QAKO,iBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,KADI;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAInBC,EAAAA,eAAe,EAAE,IAJE;AAKnBC,EAAAA,gBAAgB,EAAE;AALC,CAArB;AAQA,OAAO,MAAMC,WAAW,GAAGb,WAAW,CAAC;AACrCc,EAAAA,IAAI,EAAE,OAD+B;AAErCN,EAAAA,YAFqC;AAGrCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACR,aAAN,GAAsBS,MAAM,CAACC,OAA7B;AACD,KAHO;AAIRC,IAAAA,OAAO,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACP,IAAN,GAAaQ,MAAM,CAACC,OAApB;AACD,KANO;AAORE,IAAAA,kBAAkB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACN,eAAN,GAAwBO,MAAM,CAACC,OAA/B;AACD;AATO;AAH2B,CAAD,CAA/B,C,CAgBP;;AACA,OAAO,MAAM;AAAEH,EAAAA,gBAAF;AAAoBI,EAAAA,OAApB;AAA6BC,EAAAA;AAA7B,IACXR,WAAW,CAACS,OADP;AAGP,OAAO,MAAMrB,OAAO,GAAIsB,EAAD,IAASC,QAAD,IAAc;AAC3CA,EAAAA,QAAQ,CAACR,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACAd,EAAAA,UAAU,CAACqB,EAAD,CAAV,CAAeE,IAAf,CAAqBC,GAAD,IAAS;AAC3BF,IAAAA,QAAQ,CAACJ,OAAO,CAACM,GAAD,CAAR,CAAR;AACAF,IAAAA,QAAQ,CAACR,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACD,GAHD;AAID,CANM;AAQP,OAAO,MAAMW,OAAO,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAkBL,QAAD,IAAc;AACpDA,EAAAA,QAAQ,CAACR,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACAb,EAAAA,OAAO,CAACyB,KAAD,EAAQC,IAAR,CAAP,CAAqBJ,IAArB,CAA2BC,GAAD,IAAS;AACjCF,IAAAA,QAAQ,CAACH,kBAAkB,CAACK,GAAD,CAAnB,CAAR;AACAF,IAAAA,QAAQ,CAACR,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACD,GAHD;AAID,CANM;AAQP,OAAO,MAAMV,QAAQ,GAAG,CAACiB,EAAD,EAAKO,SAAL,EAAgBC,QAAhB,KAA8BP,QAAD,IAAc;AACjEA,EAAAA,QAAQ,CAACR,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACAT,EAAAA,WAAW,CAACgB,EAAD,EAAKO,SAAL,EAAgBC,QAAhB,CAAX,CAAqCN,IAArC,CAA2CC,GAAD,IAAS;AACjDF,IAAAA,QAAQ,CAACJ,OAAO,CAACM,GAAD,CAAR,CAAR;AACAF,IAAAA,QAAQ,CAACR,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACD,GAHD;AAID,CANM;AAQP,OAAO,MAAMZ,UAAU,GAAImB,EAAD,IAASC,QAAD,IAAc;AAC9C,SAAOnB,aAAa,CAACkB,EAAD,CAAb,CAAkBE,IAAlB,CAAwBC,GAAD,IAAS;AACrC,WAAOA,GAAP;AACD,GAFM,CAAP;AAGD,CAJM;AAMP,eAAeb,WAAW,CAACmB,OAA3B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport {\n  getPost as getPostAPI,\n  addPost,\n  deletePost as deletePostAPI,\n  editPost as editPostAPI,\n} from \"../../WebAPI.js\";\n\nconst initialState = {\n  isLoadingPost: false,\n  post: {},\n\n  newPostResponse: null,\n  editPostResponse: null,\n};\n\nexport const postReducer = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    setIsLoadingPost: (state, action) => {\n      state.isLoadingPost = action.payload;\n    },\n    setPost: (state, action) => {\n      state.post = action.payload;\n    },\n    setNewPostResponse: (state, action) => {\n      state.newPostResponse = action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setIsLoadingPost, setPost, setNewPostResponse } =\n  postReducer.actions;\n\nexport const getPost = (id) => (dispatch) => {\n  dispatch(setIsLoadingPost(true));\n  getPostAPI(id).then((res) => {\n    dispatch(setPost(res));\n    dispatch(setIsLoadingPost(false));\n  });\n};\n\nexport const newPost = (title, body) => (dispatch) => {\n  dispatch(setIsLoadingPost(true));\n  addPost(title, body).then((res) => {\n    dispatch(setNewPostResponse(res));\n    dispatch(setIsLoadingPost(false));\n  });\n};\n\nexport const editPost = (id, editTitle, editBody) => (dispatch) => {\n  dispatch(setIsLoadingPost(true));\n  editPostAPI(id, editTitle, editBody).then((res) => {\n    dispatch(setPost(res));\n    dispatch(setIsLoadingPost(false));\n  });\n};\n\nexport const deletePost = (id) => (dispatch) => {\n  return deletePostAPI(id).then((res) => {\n    return res;\n  });\n};\n\nexport default postReducer.reducer;\n"]},"metadata":{},"sourceType":"module"}