{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/storage';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDjquiByhMI0pc7g_Cx482Kp2tK-c1mlQ8\",\n  authDomain: \"indielog-172c8.firebaseapp.com\",\n  projectId: \"indielog-172c8\",\n  storageBucket: \"indielog-172c8.appspot.com\",\n  messagingSenderId: \"97403270536\",\n  appId: \"1:97403270536:web:5ea48f5aa3c58801bdf63d\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\nconst usersDb = db.collection('users');\nconst postsDb = db.collection('posts');\nconst songsDb = db.collection('songs');\nconst topicsDb = db.collection('topics'); // auth\n\nexport const signUp = (email, password, handleSuccess, handleErrMessage) => {\n  auth.createUserWithEmailAndPassword(email, password).then(signUpResult => {\n    usersDb.doc(signUpResult.user.uid).set({\n      email,\n      photoURL: '',\n      displayName: '',\n      introduction: '',\n      createdAt: firebase.firestore.Timestamp.now()\n    }).then(() => {\n      handleSuccess();\n    }).catch(err => {\n      switch (err.code) {\n        case \"auth/email-already-in-use\":\n          handleErrMessage('信箱已存在');\n          break;\n\n        case \"auth/invalid-email\":\n          handleErrMessage('信箱格式錯誤');\n          break;\n\n        case \"auth/weak-password\":\n          handleErrMessage('密碼強度不足');\n          break;\n\n        default:\n          handleErrMessage(err.code);\n      }\n    });\n  });\n};\nexport const signIn = (email, password, handleSuccess, handleErrMessage) => {\n  auth.signInWithEmailAndPassword(email, password).then(() => {\n    handleSuccess();\n  }).catch(err => {\n    switch (err.code) {\n      case \"auth/invalid-email\":\n        handleErrMessage('信箱格式錯誤');\n        break;\n\n      case \"auth/user-not-found\":\n        handleErrMessage('信箱不存在');\n        break;\n\n      case \"auth/wrong-password\":\n        handleErrMessage('密碼錯誤');\n        break;\n\n      default:\n        handleErrMessage(err.code);\n    }\n  });\n};\nexport const signOut = () => {\n  auth.signOut();\n};\nexport const checkUserStatus = handleUser => {\n  auth.onAuthStateChanged(user => {\n    if (user) {\n      handleUser({\n        uid: user.uid,\n        displayName: user.displayName,\n        email: user.email,\n        photoURL: user.photoURL\n      });\n    } else {\n      handleUser(null);\n    }\n  });\n};\nexport const forgetPassword = email => {\n  return auth.sendPasswordResetEmail(email);\n}; // firestore\n\nexport const getTopics = handleTopics => {\n  topicsDb.get().then(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handleTopics(data);\n  });\n};\nexport const getTopicsAndSetDefaultTopic = (handleTopics, handleCurrentTopic) => {\n  topicsDb.get().then(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handleTopics(data);\n    handleCurrentTopic(data[0].name);\n  });\n};\nexport const getPostsWithoutTopic = handlePosts => {\n  postsDb.orderBy('createdAt', 'desc').get().then(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handlePosts(data);\n  });\n};\nexport const getPostsWithTopic = (topic, handlePosts) => {\n  postsDb.orderBy('createdAt', 'desc').where('topic', '==', topic).get().then(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handlePosts(data);\n  });\n};\nexport const getAuthorInfo = (authorId, handleAuthorInfo) => {\n  usersDb.doc(authorId).get().then(userSnapShot => {\n    handleAuthorInfo(userSnapShot.data());\n  });\n};\nexport const addNewPost = (image, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc();\n  const imageRef = storage.ref('post-images/' + documentRef.id);\n  const metadata = {\n    contentType: image.type\n  };\n  imageRef.put(image, metadata).then(() => {\n    imageRef.getDownloadURL().then(imageUrl => {\n      documentRef.set({\n        title: postInfo.title,\n        content: postInfo.content,\n        topic: postInfo.topic,\n        createdAt: firebase.firestore.Timestamp.now(),\n        author: {\n          uid: postInfo.userId\n        },\n        imageUrl\n      });\n      handleSuccess(documentRef.id);\n    });\n  });\n};\nexport const updatePost = (postId, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc(postId);\n  documentRef.update({\n    title: postInfo.title,\n    content: postInfo.content,\n    topic: postInfo.topic,\n    updatedAt: firebase.firestore.Timestamp.now(),\n    author: {\n      uid: postInfo.userId\n    }\n  }).then(() => {\n    handleSuccess(postId);\n  });\n};\nexport const updatePostWithNewPic = (postId, image, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc(postId);\n  const imageRef = storage.ref('post-images/' + documentRef.id);\n  const metadata = {\n    contentType: image.type\n  };\n  imageRef.put(image, metadata).then(() => {\n    imageRef.getDownloadURL().then(imageUrl => {\n      documentRef.update({\n        title: postInfo.title,\n        content: postInfo.content,\n        topic: postInfo.topic,\n        updatedAt: firebase.firestore.Timestamp.now(),\n        author: {\n          uid: postInfo.userId\n        },\n        imageUrl\n      });\n      handleSuccess(documentRef.id);\n    });\n  });\n};\nexport const getCommentsOnSnapshot = (area, id, handleComments) => {\n  db.collection(area).doc(id).collection('comments').orderBy('createdAt', 'asc').onSnapshot(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      return {\n        authorUid: doc.data().authorUid,\n        content: doc.data().content,\n        createdAt: doc.data().createdAt\n      };\n    });\n    handleComments(data);\n  });\n};\nexport const addNewComment = (area, id, commentContent, authorId) => {\n  return db.collection(area).doc(id).collection('comments').doc().set({\n    content: commentContent,\n    createdAt: firebase.firestore.Timestamp.now(),\n    authorUid: authorId\n  });\n};\nexport const getPost = (postId, handlePost) => {\n  postsDb.doc(postId).get().then(docSnapShot => {\n    handlePost(docSnapShot.data());\n  });\n};\nexport const getPostWithAuthorInfo = (postId, handlePost, handleAuthorInfo) => {\n  postsDb.doc(postId).onSnapshot(docSnapShot => {\n    const data = docSnapShot.data();\n    handlePost(data);\n    usersDb.doc(data.author.uid).get().then(userSnapShot => {\n      handleAuthorInfo(userSnapShot.data());\n    });\n  });\n};\nexport const getMyPostsOnSnapshot = (userId, handlePosts) => {\n  postsDb.where('author.uid', '==', userId).onSnapshot(collectionSnapshot => {\n    const data = collectionSnapshot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handlePosts(data);\n  });\n};\nexport const togglePostLiked = (isLiked, postId, userId) => {\n  if (isLiked) {\n    var _firebase$firestore$F;\n\n    postsDb.doc(postId).update({\n      likedBy: (_firebase$firestore$F = firebase.firestore.FieldValue) === null || _firebase$firestore$F === void 0 ? void 0 : _firebase$firestore$F.arrayRemove(userId)\n    });\n  } else {\n    var _firebase$firestore$F2;\n\n    postsDb.doc(postId).update({\n      likedBy: (_firebase$firestore$F2 = firebase.firestore.FieldValue) === null || _firebase$firestore$F2 === void 0 ? void 0 : _firebase$firestore$F2.arrayUnion(userId)\n    });\n  }\n};\nexport const getLikedPosts = (userId, handlePosts) => {\n  postsDb.where('likedBy', 'array-contains', userId).get().then(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handlePosts(data);\n  });\n};\nexport const deletePost = postId => {\n  postsDb.doc(postId).delete().then(() => {\n    alert('已刪除文章');\n  });\n};\nexport const getLikedSongs = (userId, handleSongs) => {\n  songsDb.where('likedBy', 'array-contains', userId).get().then(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handleSongs(data);\n  });\n};\nexport const toggleSongLiked = (isLiked, songId, userId) => {\n  if (isLiked) {\n    var _firebase$firestore$F3;\n\n    songsDb.doc(songId).update({\n      likedBy: (_firebase$firestore$F3 = firebase.firestore.FieldValue) === null || _firebase$firestore$F3 === void 0 ? void 0 : _firebase$firestore$F3.arrayRemove(userId)\n    });\n  } else {\n    var _firebase$firestore$F4;\n\n    songsDb.doc(songId).update({\n      likedBy: (_firebase$firestore$F4 = firebase.firestore.FieldValue) === null || _firebase$firestore$F4 === void 0 ? void 0 : _firebase$firestore$F4.arrayUnion(userId)\n    });\n  }\n};\nexport const getSongOnSnapShot = (songId, handleSong) => {\n  songsDb.doc(songId).onSnapshot(docSnapshot => handleSong(docSnapshot.data()));\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/fanyukun/Documents/react/indielog/src/utils/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","db","firestore","auth","storage","usersDb","collection","postsDb","songsDb","topicsDb","signUp","email","password","handleSuccess","handleErrMessage","createUserWithEmailAndPassword","then","signUpResult","doc","user","uid","set","photoURL","displayName","introduction","createdAt","Timestamp","now","catch","err","code","signIn","signInWithEmailAndPassword","signOut","checkUserStatus","handleUser","onAuthStateChanged","forgetPassword","sendPasswordResetEmail","getTopics","handleTopics","get","collectionSnapShot","data","docs","map","id","getTopicsAndSetDefaultTopic","handleCurrentTopic","name","getPostsWithoutTopic","handlePosts","orderBy","getPostsWithTopic","topic","where","getAuthorInfo","authorId","handleAuthorInfo","userSnapShot","addNewPost","image","postInfo","documentRef","imageRef","ref","metadata","contentType","type","put","getDownloadURL","imageUrl","title","content","author","userId","updatePost","postId","update","updatedAt","updatePostWithNewPic","getCommentsOnSnapshot","area","handleComments","onSnapshot","authorUid","addNewComment","commentContent","getPost","handlePost","docSnapShot","getPostWithAuthorInfo","getMyPostsOnSnapshot","collectionSnapshot","togglePostLiked","isLiked","likedBy","FieldValue","arrayRemove","arrayUnion","getLikedPosts","deletePost","delete","alert","getLikedSongs","handleSongs","toggleSongLiked","songId","getSongOnSnapShot","handleSong","docSnapshot"],"mappings":"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","sourcesContent":["import firebase from 'firebase/compat/app'\nimport 'firebase/compat/auth'\nimport 'firebase/compat/firestore'\nimport 'firebase/compat/storage'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDjquiByhMI0pc7g_Cx482Kp2tK-c1mlQ8\",\n  authDomain: \"indielog-172c8.firebaseapp.com\",\n  projectId: \"indielog-172c8\",\n  storageBucket: \"indielog-172c8.appspot.com\",\n  messagingSenderId: \"97403270536\",\n  appId: \"1:97403270536:web:5ea48f5aa3c58801bdf63d\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst db = firebase.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage()\nconst usersDb = db.collection('users')\nconst postsDb = db.collection('posts')\nconst songsDb = db.collection('songs')\nconst topicsDb = db.collection('topics')\n\n\n// auth\nexport const signUp = (email, password, handleSuccess, handleErrMessage) => {\n  auth.createUserWithEmailAndPassword(email, password).then((signUpResult) => {\n    usersDb.doc(signUpResult.user.uid).set({\n      email,\n      photoURL: '',\n      displayName: '',\n      introduction: '',\n      createdAt: firebase.firestore.Timestamp.now()\n    }).then(() => {\n      handleSuccess()\n    }).catch((err) => {\n      switch(err.code) {\n        case \"auth/email-already-in-use\":\n          handleErrMessage('信箱已存在')\n          break\n        case \"auth/invalid-email\":\n          handleErrMessage('信箱格式錯誤')\n          break\n        case \"auth/weak-password\":\n          handleErrMessage('密碼強度不足')\n          break\n        default:\n          handleErrMessage(err.code)\n      }\n    })\n  })\n}\n\nexport const signIn = (email, password, handleSuccess, handleErrMessage) => {\n  auth.signInWithEmailAndPassword(email, password).then(() => {\n    handleSuccess()\n  }).catch((err) => {\n    switch(err.code) {\n      case \"auth/invalid-email\":\n        handleErrMessage('信箱格式錯誤')\n        break\n      case \"auth/user-not-found\":\n        handleErrMessage('信箱不存在')\n        break\n      case \"auth/wrong-password\":\n        handleErrMessage('密碼錯誤')\n        break\n      default:\n        handleErrMessage(err.code)\n    }\n  })\n}\n\nexport const signOut = () => {\n  auth.signOut()\n}\n\nexport const checkUserStatus = (handleUser) => {\n  auth.onAuthStateChanged((user) => {\n    if(user) {\n      handleUser({\n        uid: user.uid,\n        displayName: user.displayName,\n        email: user.email,\n        photoURL: user.photoURL\n      })\n    } else {\n      handleUser(null)\n    }\n  })\n}\n\nexport const forgetPassword = (email) => {\n  return auth.sendPasswordResetEmail(email)\n}\n\n\n// firestore\nexport const getTopics = (handleTopics) => {\n  topicsDb.get().then((collectionSnapShot) => {\n    const data = collectionSnapShot.docs.map((doc) => {\n      const id = doc.id\n      return {...doc.data(),id}\n    })\n    handleTopics(data)\n  })\n}\n\nexport const getTopicsAndSetDefaultTopic = (handleTopics, handleCurrentTopic) => {\n  topicsDb.get().then((collectionSnapShot) => {\n    const data = collectionSnapShot.docs.map((doc) => {\n      const id = doc.id\n      return {...doc.data(),id}\n    })\n    handleTopics(data)\n    handleCurrentTopic(data[0].name)\n  })\n}\n\nexport const getPostsWithoutTopic = (handlePosts) => {\n  postsDb.orderBy('createdAt','desc').get().then((collectionSnapShot) => {\n    const data = collectionSnapShot.docs.map((doc) => {\n      const id = doc.id\n      return {...doc.data(),id}\n    })\n    handlePosts(data)\n  })\n}\n\nexport const getPostsWithTopic = (topic, handlePosts) => {\n  postsDb.orderBy('createdAt','desc').where('topic','==',topic).get().then((collectionSnapShot) => {\n    const data = collectionSnapShot.docs.map((doc) => {\n      const id = doc.id\n      return {...doc.data(),id}\n    })\n    handlePosts(data)\n  })\n}\n\nexport const getAuthorInfo = (authorId, handleAuthorInfo) => {\n  usersDb.doc(authorId).get().then((userSnapShot) => {\n    handleAuthorInfo(userSnapShot.data())\n  })\n}\n\nexport const addNewPost = (image, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc()\n  const imageRef = storage.ref('post-images/' + documentRef.id)\n  const metadata = {\n    contentType: image.type\n  }\n\n  imageRef.put(image, metadata).then(() => {\n    imageRef.getDownloadURL().then((imageUrl) => {\n      documentRef.set({\n        title: postInfo.title,\n        content: postInfo.content,\n        topic: postInfo.topic,\n        createdAt: firebase.firestore.Timestamp.now(),\n        author: {\n          uid: postInfo.userId,\n        },\n        imageUrl\n      })\n      handleSuccess(documentRef.id)\n    })\n  })\n}\n\nexport const updatePost = (postId, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc(postId)\n  documentRef.update({\n    title: postInfo.title,\n    content: postInfo.content,\n    topic: postInfo.topic,\n    updatedAt: firebase.firestore.Timestamp.now(),\n    author: {\n      uid: postInfo.userId,\n    }\n    }).then(() => {\n      handleSuccess(postId)\n    })\n}\n\nexport const updatePostWithNewPic = (postId, image, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc(postId)\n  const imageRef = storage.ref('post-images/' + documentRef.id)\n  const metadata = {\n    contentType: image.type\n  }\n\n  imageRef.put(image, metadata).then(() => {\n    imageRef.getDownloadURL().then((imageUrl) => {\n      documentRef.update({\n        title: postInfo.title,\n        content: postInfo.content,\n        topic: postInfo.topic,\n        updatedAt: firebase.firestore.Timestamp.now(),\n        author: {\n          uid: postInfo.userId,\n        },\n        imageUrl\n      })\n      handleSuccess(documentRef.id)\n    })\n  })\n}\n\n\nexport const getCommentsOnSnapshot = (area, id, handleComments) => {\n  db.collection(area).doc(id).collection('comments').orderBy('createdAt','asc').onSnapshot((collectionSnapShot) => {\n     const data = collectionSnapShot.docs.map((doc) => {\n       return {\n         authorUid: doc.data().authorUid,\n         content: doc.data().content,\n         createdAt: doc.data().createdAt\n       }\n     })\n     handleComments(data)\n  })\n}\n\nexport const addNewComment = (area, id, commentContent, authorId) => {\n  return db.collection(area).doc(id).collection('comments').doc().set({\n    content: commentContent,\n    createdAt: firebase.firestore.Timestamp.now(),\n    authorUid: authorId,\n  })\n}\n\nexport const getPost = (postId, handlePost) => {\n  postsDb.doc(postId).get().then((docSnapShot) => {\n    handlePost(docSnapShot.data())\n  })\n}\n\nexport const getPostWithAuthorInfo = (postId, handlePost, handleAuthorInfo) => {\n  postsDb.doc(postId).onSnapshot((docSnapShot) => {\n    const data = docSnapShot.data()\n    handlePost(data)\n    usersDb.doc(data.author.uid).get().then((userSnapShot) => {\n      handleAuthorInfo(userSnapShot.data())\n    })\n  })\n}\n\nexport const getMyPostsOnSnapshot = (userId, handlePosts) => {\n  postsDb.where('author.uid','==', userId).onSnapshot((collectionSnapshot) => {\n    const data = collectionSnapshot.docs.map((doc) => {\n      const id = doc.id\n      return { ...doc.data(), id }\n    })\n    handlePosts(data)\n  })\n}\n\nexport const togglePostLiked = (isLiked, postId, userId) => {\n  if(isLiked) {\n    postsDb.doc(postId).update({\n      likedBy: firebase.firestore.FieldValue?.arrayRemove(userId)\n    })\n  } else {\n    postsDb.doc(postId).update({\n      likedBy: firebase.firestore.FieldValue?.arrayUnion(userId)\n    })\n  }\n}\n\nexport const getLikedPosts = (userId, handlePosts) => {\n  postsDb.where('likedBy', 'array-contains', userId).get().then((collectionSnapShot) => {\n    const data = collectionSnapShot.docs.map((doc) => {\n      const id = doc.id\n      return {...doc.data(),id}\n    })\n    handlePosts(data)\n  })\n}\n\nexport const deletePost = (postId) => {\n  postsDb.doc(postId).delete().then(() => {\n    alert('已刪除文章')\n  })\n}\n\nexport const getLikedSongs = (userId, handleSongs) => {\n  songsDb.where('likedBy', 'array-contains', userId).get().then((collectionSnapShot) => {\n    const data = collectionSnapShot.docs.map((doc) => {\n      const id = doc.id\n      return {...doc.data(),id}\n    })\n    handleSongs(data)\n  })\n}\n\nexport const toggleSongLiked = (isLiked, songId, userId) => {\n  if(isLiked) {\n    songsDb.doc(songId).update({\n      likedBy: firebase.firestore.FieldValue?.arrayRemove(userId)\n    })\n  } else {\n    songsDb.doc(songId).update({\n      likedBy: firebase.firestore.FieldValue?.arrayUnion(userId)\n    })\n  }\n}\n\nexport const getSongOnSnapShot = (songId, handleSong) => {\n  songsDb.doc(songId).onSnapshot((docSnapshot) => handleSong(docSnapshot.data()))\n}\n\n\n\nexport default firebase\n"]},"metadata":{},"sourceType":"module"}