{"ast":null,"code":"var _jsxFileName = \"/Users/fanyukun/Documents/react/Indielog/Indielog/src/components/MusicPlayerSmall/index.js\",\n    _s = $RefreshSig$();\n\nimport { Container, ImgDiv, InfoContainer, SongName, AuthorName, IconContainer, FontAwesome, Track, AnimateTrack, InputRange } from './MusicPlayerSmallElements.js';\nimport { faSlidersH, faPlay, faPause } from '@fortawesome/free-solid-svg-icons';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSongPlayingInfo, setIsPlaying, setMode } from \"../../redux/reducers/playerControlReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MusicPlayerSmall = ({\n  audioRef\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(store => store.playerControl.isPlaying);\n  const currentSong = useSelector(store => store.song.currentSong);\n  const songPlayingInfo = useSelector(store => store.playerControl.songPlayingInfo);\n\n  const dragHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    dispatch(setSongPlayingInfo({ ...songPlayingInfo,\n      currentTime: e.target.value\n    }));\n  };\n\n  const playSongHandler = () => {\n    dispatch(setIsPlaying(!isPlaying));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Track, {\n        children: [/*#__PURE__*/_jsxDEV(InputRange, {\n          min: 0,\n          max: songPlayingInfo.duration,\n          value: songPlayingInfo.currentTime,\n          onChange: dragHandler,\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnimateTrack, {\n          animationPercentage: songPlayingInfo.animationPercentage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImgDiv, {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"\",\n          src: currentSong.cover\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoContainer, {\n        children: [/*#__PURE__*/_jsxDEV(SongName, {\n          children: currentSong.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AuthorName, {\n          children: currentSong.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconContainer, {\n        children: [/*#__PURE__*/_jsxDEV(FontAwesome, {\n          onClick: playSongHandler,\n          size: \"1x\",\n          icon: isPlaying ? faPause : faPlay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FontAwesome, {\n          onClick: () => dispatch(setMode(2)),\n          size: \"1x\",\n          icon: faSlidersH\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MusicPlayerSmall, \"vqY+X3MOrlf3Ubd5XMC8MzXWo90=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = MusicPlayerSmall;\nexport default MusicPlayerSmall;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicPlayerSmall\");","map":{"version":3,"sources":["/Users/fanyukun/Documents/react/Indielog/Indielog/src/components/MusicPlayerSmall/index.js"],"names":["Container","ImgDiv","InfoContainer","SongName","AuthorName","IconContainer","FontAwesome","Track","AnimateTrack","InputRange","faSlidersH","faPlay","faPause","useDispatch","useSelector","setSongPlayingInfo","setIsPlaying","setMode","MusicPlayerSmall","audioRef","dispatch","isPlaying","store","playerControl","currentSong","song","songPlayingInfo","dragHandler","e","current","currentTime","target","value","playSongHandler","duration","animationPercentage","cover","name","artist"],"mappings":"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","sourcesContent":["import {\n  Container,\n  ImgDiv,\n  InfoContainer,\n  SongName,\n  AuthorName,\n  IconContainer,\n  FontAwesome,\n  Track,\n  AnimateTrack,\n  InputRange,\n } from './MusicPlayerSmallElements.js'\nimport {\n  faSlidersH,\n  faPlay,\n  faPause\n} from '@fortawesome/free-solid-svg-icons'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSongPlayingInfo, setIsPlaying, setMode } from \"../../redux/reducers/playerControlReducer\"\n\nconst MusicPlayerSmall = ({ audioRef }) => {\n  const dispatch = useDispatch()\n  const isPlaying = useSelector((store) => store.playerControl.isPlaying)\n  const currentSong = useSelector((store) => store.song.currentSong)\n  const songPlayingInfo = useSelector((store) => store.playerControl.songPlayingInfo)\n  const dragHandler = (e) => {\n    audioRef.current.currentTime = e.target.value\n    dispatch(setSongPlayingInfo({...songPlayingInfo, currentTime: e.target.value}))\n  }\n  const playSongHandler = () => {\n    dispatch(setIsPlaying(!isPlaying))\n  }\n\n  return (\n    <>\n      <Container>\n        <Track>\n          <InputRange\n            min={0}\n            max={songPlayingInfo.duration}\n            value={songPlayingInfo.currentTime}\n            onChange={dragHandler}\n            type=\"range\"\n          />\n          <AnimateTrack animationPercentage={songPlayingInfo.animationPercentage}/>\n        </Track>\n        <ImgDiv>\n          <img alt='' src={currentSong.cover}/>\n        </ImgDiv>\n        <InfoContainer>\n          <SongName>{currentSong.name}</SongName>\n          <AuthorName>{currentSong.artist}</AuthorName>\n        </InfoContainer>\n        <IconContainer>\n          <FontAwesome onClick={playSongHandler} size=\"1x\" icon={isPlaying ? faPause : faPlay}/>\n          <FontAwesome onClick={() => dispatch(setMode(2))} size=\"1x\" icon={faSlidersH}/>\n        </IconContainer>\n      </Container>\n    </>\n  )\n}\n\nexport default MusicPlayerSmall\n"]},"metadata":{},"sourceType":"module"}