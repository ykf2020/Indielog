{"ast":null,"code":"var _jsxFileName = \"/Users/fanyukun/Documents/react/indielog/src/components/MusicPlayer/index.js\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport MusicPlayerSmall from '../MusicPlayerSmall';\nimport MusicPlayerFull from '../MusicPlayerFull';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MusicPlayer = () => {\n  _s();\n\n  const audioRef = useRef(null);\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(store => store.playerControl.isPlaying);\n  const sound = useSelector(store => store.playerControl.sound);\n  const songPlayingInfo = useSelector(store => store.playerControl.songPlayingInfo);\n  const songs = useSelector(store => store.song.songs);\n  const currentSong = useSelector(store => store.song.currentSong);\n  const libraryStatus = useSelector(store => store.playerControl.libraryStatus);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animationPercentage = Math.round(roundedCurrent / roundedDuration * 100);\n    dispatch(setSongPlayingInfo({ ...songPlayingInfo,\n      currentTime: current,\n      duration,\n      animationPercentage\n    }));\n    console.log(sound);\n  };\n\n  const songEndHandler = () => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n    dispatch(setCurrentSong(songs[(currentIndex + 1) % songs.length]));\n    if (isPlaying) audioRef.current.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MusicPlayerSmall, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MusicPlayerFull, {\n      audioRef: audioRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      volume: sound.volume,\n      muted: sound.mute,\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio,\n      onEnded: songEndHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MusicPlayer, \"HI2HvY2irOnk7f4pv5ad8HAIeN8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = MusicPlayer;\nexport default MusicPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"sources":["/Users/fanyukun/Documents/react/indielog/src/components/MusicPlayer/index.js"],"names":["useRef","MusicPlayerSmall","MusicPlayerFull","useDispatch","useSelector","MusicPlayer","audioRef","dispatch","isPlaying","store","playerControl","sound","songPlayingInfo","songs","song","currentSong","libraryStatus","timeUpdateHandler","e","current","target","currentTime","duration","roundedCurrent","Math","round","roundedDuration","animationPercentage","setSongPlayingInfo","console","log","songEndHandler","currentIndex","findIndex","id","setCurrentSong","length","play","volume","mute","audio"],"mappings":"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","sourcesContent":["import { useRef } from 'react'\nimport MusicPlayerSmall from '../MusicPlayerSmall'\nimport MusicPlayerFull from '../MusicPlayerFull'\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst MusicPlayer = () => {\n  const audioRef = useRef(null)\n  const dispatch = useDispatch()\n  const isPlaying = useSelector((store) => store.playerControl.isPlaying)\n  const sound = useSelector((store) => store.playerControl.sound)\n  const songPlayingInfo = useSelector((store) => store.playerControl.songPlayingInfo)\n  const songs = useSelector((store) => store.song.songs)\n  const currentSong = useSelector((store) => store.song.currentSong)\n  const libraryStatus = useSelector((store) => store.playerControl.libraryStatus)\n\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime\n    const duration = e.target.duration\n    const roundedCurrent = Math.round(current)\n    const roundedDuration = Math.round(duration)\n    const animationPercentage = Math.round((roundedCurrent / roundedDuration) * 100 )\n    dispatch(setSongPlayingInfo({\n      ...songPlayingInfo,\n      currentTime: current,\n      duration,\n      animationPercentage,\n    }))\n    console.log(sound)\n  }\n\n  const songEndHandler = () => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id)\n    dispatch(setCurrentSong(songs[(currentIndex + 1) % songs.length]))\n    if (isPlaying) audioRef.current.play()\n  }\n  return (\n    <>\n      <MusicPlayerSmall />\n      <MusicPlayerFull audioRef={audioRef} />\n      <audio\n        volume={sound.volume}\n        muted={sound.mute}\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        onEnded={songEndHandler}\n      ></audio>\n\n    </>\n  )\n}\n\nexport default MusicPlayer\n"]},"metadata":{},"sourceType":"module"}