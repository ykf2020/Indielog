{"ast":null,"code":"var _jsxFileName = \"/Users/fanyukun/Documents/react/Indielog/Indielog/src/components/MusicPlayer/index.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect } from 'react';\nimport MusicPlayerSmall from '../MusicPlayerSmall';\nimport MusicPlayerFull from '../MusicPlayerFull';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCurrentSong } from \"../../redux/reducers/songReducer\";\nimport { setSongPlayingInfo, setIsPlaying } from \"../../redux/reducers/playerControlReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MusicPlayer = () => {\n  _s();\n\n  const audioRef = useRef(null);\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(store => store.playerControl.isPlaying);\n  const sound = useSelector(store => store.playerControl.sound);\n  const songPlayingInfo = useSelector(store => store.playerControl.songPlayingInfo);\n  const songs = useSelector(store => store.song.songs);\n  const currentSong = useSelector(store => store.song.currentSong);\n  const mode = useSelector(store => store.playerControl.mode);\n  const loop = useSelector(store => store.playerControl.loop);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animationPercentage = Math.round(roundedCurrent / roundedDuration * 100);\n    dispatch(setSongPlayingInfo({ ...songPlayingInfo,\n      currentTime: current,\n      duration,\n      animationPercentage\n    }));\n  };\n\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n    await dispatch(setCurrentSong(songs[(currentIndex + 1) % songs.length]));\n    if (isPlaying) dispatch(setIsPlaying(true));\n  };\n\n  useEffect(() => {\n    if (mode === 0) dispatch(setIsPlaying(false));\n  }, [mode]);\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n    } else if (!isPlaying) {\n      audioRef.current.pause();\n    }\n  }, [isPlaying, currentSong, mode]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [mode === 1 && /*#__PURE__*/_jsxDEV(MusicPlayerSmall, {\n      audioRef: audioRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }, this), (mode === 2 || mode === 3) && /*#__PURE__*/_jsxDEV(MusicPlayerFull, {\n      audioRef: audioRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      volume: sound.volume,\n      muted: sound.mute,\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio,\n      onEnded: songEndHandler,\n      loop: loop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MusicPlayer, \"tUjpdxAdXWcsA1auCGfOGDjseL4=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = MusicPlayer;\nexport default MusicPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"sources":["/Users/fanyukun/Documents/react/Indielog/Indielog/src/components/MusicPlayer/index.js"],"names":["useRef","useEffect","MusicPlayerSmall","MusicPlayerFull","useDispatch","useSelector","setCurrentSong","setSongPlayingInfo","setIsPlaying","MusicPlayer","audioRef","dispatch","isPlaying","store","playerControl","sound","songPlayingInfo","songs","song","currentSong","mode","loop","timeUpdateHandler","e","current","target","currentTime","duration","roundedCurrent","Math","round","roundedDuration","animationPercentage","songEndHandler","currentIndex","findIndex","id","length","play","pause","volume","mute","audio"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,kBAAT,EAA6BC,YAA7B,QAAiD,2CAAjD;;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMW,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,SAAS,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,aAAN,CAAoBF,SAAhC,CAA7B;AACA,QAAMG,KAAK,GAAGV,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,aAAN,CAAoBC,KAAhC,CAAzB;AACA,QAAMC,eAAe,GAAGX,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,aAAN,CAAoBE,eAAhC,CAAnC;AACA,QAAMC,KAAK,GAAGZ,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACK,IAAN,CAAWD,KAAvB,CAAzB;AACA,QAAME,WAAW,GAAGd,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACK,IAAN,CAAWC,WAAvB,CAA/B;AACA,QAAMC,IAAI,GAAGf,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,aAAN,CAAoBM,IAAhC,CAAxB;AACA,QAAMC,IAAI,GAAGhB,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,aAAN,CAAoBO,IAAhC,CAAxB;;AAEA,QAAMC,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASC,WAAzB;AACA,UAAMC,QAAQ,GAAGJ,CAAC,CAACE,MAAF,CAASE,QAA1B;AACA,UAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWN,OAAX,CAAvB;AACA,UAAMO,eAAe,GAAGF,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAxB;AACA,UAAMK,mBAAmB,GAAGH,IAAI,CAACC,KAAL,CAAYF,cAAc,GAAGG,eAAlB,GAAqC,GAAhD,CAA5B;AACApB,IAAAA,QAAQ,CAACJ,kBAAkB,CAAC,EAC1B,GAAGS,eADuB;AAE1BU,MAAAA,WAAW,EAAEF,OAFa;AAG1BG,MAAAA,QAH0B;AAI1BK,MAAAA;AAJ0B,KAAD,CAAnB,CAAR;AAMD,GAZD;;AAcA,QAAMC,cAAc,GAAG,YAAY;AACjC,QAAIC,YAAY,GAAGjB,KAAK,CAACkB,SAAN,CAAiBjB,IAAD,IAAUA,IAAI,CAACkB,EAAL,KAAYjB,WAAW,CAACiB,EAAlD,CAAnB;AACA,UAAMzB,QAAQ,CAACL,cAAc,CAACW,KAAK,CAAC,CAACiB,YAAY,GAAG,CAAhB,IAAqBjB,KAAK,CAACoB,MAA5B,CAAN,CAAf,CAAd;AACA,QAAIzB,SAAJ,EAAeD,QAAQ,CAACH,YAAY,CAAC,IAAD,CAAb,CAAR;AAChB,GAJD;;AAMAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGmB,IAAI,KAAK,CAAZ,EAAeT,QAAQ,CAACH,YAAY,CAAC,KAAD,CAAb,CAAR;AAChB,GAFQ,EAEP,CAACY,IAAD,CAFO,CAAT;AAIAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGW,SAAH,EAAc;AACZF,MAAAA,QAAQ,CAACc,OAAT,CAAiBc,IAAjB;AACD,KAFD,MAEO,IAAI,CAAC1B,SAAL,EAAgB;AACrBF,MAAAA,QAAQ,CAACc,OAAT,CAAiBe,KAAjB;AACD;AACF,GANQ,EAMN,CAAC3B,SAAD,EAAYO,WAAZ,EAAyBC,IAAzB,CANM,CAAT;AAOA,sBACE;AAAA,eACIA,IAAI,KAAK,CAAV,iBAAiB,QAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAEV;AAA5B;AAAA;AAAA;AAAA;AAAA,YADpB,EAEG,CAACU,IAAI,KAAK,CAAT,IAAcA,IAAI,KAAK,CAAxB,kBAA8B,QAAC,eAAD;AAAiB,MAAA,QAAQ,EAAEV;AAA3B;AAAA;AAAA;AAAA;AAAA,YAFjC,eAGE;AACE,MAAA,MAAM,EAAEK,KAAK,CAACyB,MADhB;AAEE,MAAA,KAAK,EAAEzB,KAAK,CAAC0B,IAFf;AAGE,MAAA,YAAY,EAAEnB,iBAHhB;AAIE,MAAA,gBAAgB,EAAEA,iBAJpB;AAKE,MAAA,GAAG,EAAEZ,QALP;AAME,MAAA,GAAG,EAAES,WAAW,CAACuB,KANnB;AAOE,MAAA,OAAO,EAAET,cAPX;AAQE,MAAA,IAAI,EAAEZ;AARR;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAgBD,CA1DD;;GAAMZ,W;UAEaL,W,EACCC,W,EACJA,W,EACUA,W,EACVA,W,EACMA,W,EACPA,W,EACAA,W;;;KATTI,W;AA4DN,eAAeA,WAAf","sourcesContent":["import { useRef, useEffect } from 'react'\nimport MusicPlayerSmall from '../MusicPlayerSmall'\nimport MusicPlayerFull from '../MusicPlayerFull'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCurrentSong } from \"../../redux/reducers/songReducer\";\nimport { setSongPlayingInfo, setIsPlaying } from \"../../redux/reducers/playerControlReducer\"\n\nconst MusicPlayer = () => {\n  const audioRef = useRef(null)\n  const dispatch = useDispatch()\n  const isPlaying = useSelector((store) => store.playerControl.isPlaying)\n  const sound = useSelector((store) => store.playerControl.sound)\n  const songPlayingInfo = useSelector((store) => store.playerControl.songPlayingInfo)\n  const songs = useSelector((store) => store.song.songs)\n  const currentSong = useSelector((store) => store.song.currentSong)\n  const mode = useSelector((store) => store.playerControl.mode)\n  const loop = useSelector((store) => store.playerControl.loop)\n\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime\n    const duration = e.target.duration\n    const roundedCurrent = Math.round(current)\n    const roundedDuration = Math.round(duration)\n    const animationPercentage = Math.round((roundedCurrent / roundedDuration) * 100 )\n    dispatch(setSongPlayingInfo({\n      ...songPlayingInfo,\n      currentTime: current,\n      duration,\n      animationPercentage,\n    }))\n  }\n\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id)\n    await dispatch(setCurrentSong(songs[(currentIndex + 1) % songs.length]))\n    if (isPlaying) dispatch(setIsPlaying(true))\n  }\n\n  useEffect(() => {\n    if(mode === 0) dispatch(setIsPlaying(false))\n  },[mode])\n\n  useEffect(() => {\n    if(isPlaying) {\n      audioRef.current.play()\n    } else if (!isPlaying) {\n      audioRef.current.pause()\n    }\n  }, [isPlaying, currentSong, mode])\n  return (\n    <>\n      {(mode === 1 ) && <MusicPlayerSmall audioRef={audioRef} />}\n      {(mode === 2 || mode === 3) && <MusicPlayerFull audioRef={audioRef} />}\n      <audio\n        volume={sound.volume}\n        muted={sound.mute}\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        onEnded={songEndHandler}\n        loop={loop}\n      ></audio>\n    </>\n  )\n}\n\nexport default MusicPlayer\n"]},"metadata":{},"sourceType":"module"}