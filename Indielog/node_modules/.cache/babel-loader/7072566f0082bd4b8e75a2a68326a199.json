{"ast":null,"code":"var _jsxFileName = \"/Users/fanyukun/Documents/react/indielog/src/components/MusicPlayerFull/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Container, Nav, NavLogo, BodyContainer, Library, Song, SongInfo, ControlPanel, FontAwesome, SongName, AuthorName, ImgDiv, Slider, Buttons, Track, AnimateTrack, InputRange, SongCurrentTime, SongFullTime, FontAwesomeControl, ToggleButton, BgFilter, ButtonGroup, LibrarySongDiv, LibrarySongDesc, LibrarySongName, LibrarySongAuthorName, LibraryImgDiv } from './MusicPlayerFullElements.js';\nimport { faPause, faPlay, faTimes, faVolumeUp, faChevronRight, faChevronLeft, faUndo, faToggleOff, faToggleOn, faCompressAlt } from '@fortawesome/free-solid-svg-icons';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSongs, setCurrentSong } from \"../../redux/reducers/songReducer\";\nimport { setSound, setIsPlaying, setMode, setSongPlayingInfo, setLoop } from \"../../redux/reducers/playerControlReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MusicPlayerFull = ({\n  audioRef\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [animationPercentage, setAnimationPercentage] = useState(50);\n  const mode = useSelector(store => store.playerControl.mode);\n  const isPlaying = useSelector(store => store.playerControl.isPlaying);\n  const songs = useSelector(store => store.song.songs);\n  const currentSong = useSelector(store => store.song.currentSong);\n  const songPlayingInfo = useSelector(store => store.playerControl.songPlayingInfo);\n  const sound = useSelector(store => store.playerControl.sound);\n  const loop = useSelector(store => store.playerControl.loop);\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  };\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      dispatch(setIsPlaying(!isPlaying));\n    } else {\n      audioRef.current.play();\n      dispatch(setIsPlaying(!isPlaying));\n    }\n  };\n\n  const dragHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    dispatch(setSongPlayingInfo({ ...songPlayingInfo,\n      currentTime: e.target.value\n    }));\n  };\n\n  const skipTrackHandler = async direction => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n\n    if (direction === 'skip-forward') {\n      await dispatch(setCurrentSong(songs[(currentIndex + 1) % songs.length]));\n    }\n\n    if (direction === 'skip-back') {\n      if ((currentIndex - 1) % songs.length === -1) {\n        await dispatch(setCurrentSong(songs[songs.length - 1]));\n        if (isPlaying) audioRef.current.play();\n        return;\n      }\n\n      await dispatch(setCurrentSong(songs[(currentIndex - 1) % songs.length]));\n    }\n\n    if (isPlaying) audioRef.current.play();\n  };\n\n  const volumeToggler = () => {\n    if (!sound.mute) {\n      dispatch(setSound({ ...sound,\n        mute: true,\n        volume: 0\n      }));\n    } else {\n      dispatch(setSound({ ...sound,\n        mute: false,\n        volume: sound.prevVolume\n      }));\n    }\n  };\n\n  const volumeHandler = e => {\n    if (e.target.value == 0) {\n      dispatch(setSound({ ...sound,\n        mute: true,\n        volume: e.target.value\n      }));\n    } else {\n      dispatch(setSound({ ...sound,\n        mute: false,\n        volume: e.target.value,\n        prevVolume: e.target.value\n      }));\n    }\n\n    audioRef.current.volume = e.target.value;\n  };\n\n  const songSelectHandler = async song => {\n    await dispatch(setCurrentSong(song));\n    if (isPlaying) audioRef.current.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      bgImg: currentSong.cover,\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        children: [/*#__PURE__*/_jsxDEV(NavLogo, {\n          to: \"/\",\n          children: \"Indielog\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          children: [/*#__PURE__*/_jsxDEV(FontAwesome, {\n            onClick: () => dispatch(setMode(1)),\n            size: \"2x\",\n            icon: faCompressAlt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FontAwesome, {\n            onClick: () => dispatch(setMode(0)),\n            size: \"2x\",\n            icon: faTimes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n          size: \"2x\",\n          icon: mode === 3 ? faToggleOn : faToggleOff,\n          onClick: () => dispatch(setMode(mode === 3 ? 2 : 3))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BodyContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Library, {\n          mode: mode,\n          children: songs.map(song => {\n            return /*#__PURE__*/_jsxDEV(LibrarySongDiv, {\n              onClick: () => songSelectHandler(song),\n              active: song.id === currentSong.id,\n              children: [/*#__PURE__*/_jsxDEV(LibraryImgDiv, {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: song.cover\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(LibrarySongDesc, {\n                children: [/*#__PURE__*/_jsxDEV(LibrarySongName, {\n                  children: song.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(LibrarySongAuthorName, {\n                  children: song.artist\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this)]\n            }, song.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Song, {\n          mode: mode,\n          children: [/*#__PURE__*/_jsxDEV(SongInfo, {\n            children: [/*#__PURE__*/_jsxDEV(ImgDiv, {\n              mode: mode,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: currentSong.cover\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 35\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SongName, {\n              children: currentSong.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(AuthorName, {\n              children: currentSong.artist\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n            children: [/*#__PURE__*/_jsxDEV(Slider, {\n              children: [/*#__PURE__*/_jsxDEV(SongCurrentTime, {\n                children: getTime(songPlayingInfo.currentTime)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Track, {\n                children: [/*#__PURE__*/_jsxDEV(InputRange, {\n                  min: 0,\n                  min: 0,\n                  max: songPlayingInfo.duration,\n                  value: songPlayingInfo.currentTime,\n                  onChange: dragHandler,\n                  type: \"range\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(AnimateTrack, {\n                  animationPercentage: songPlayingInfo.animationPercentage\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(SongFullTime, {\n                children: getTime(songPlayingInfo.duration || 0)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n              children: [/*#__PURE__*/_jsxDEV(FontAwesomeControl, {\n                onClick: () => dispatch(setLoop(!loop)),\n                size: \"1x\",\n                icon: faUndo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FontAwesomeControl, {\n                onClick: () => {\n                  skipTrackHandler('skip-back');\n                },\n                size: \"1x\",\n                icon: faChevronLeft\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FontAwesomeControl, {\n                onClick: playSongHandler,\n                size: \"2x\",\n                icon: isPlaying ? faPause : faPlay\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FontAwesomeControl, {\n                onClick: () => {\n                  skipTrackHandler('skip-forward');\n                },\n                size: \"1x\",\n                icon: faChevronRight\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FontAwesomeControl, {\n                size: \"1x\",\n                icon: faVolumeUp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MusicPlayerFull, \"rpXlxRF7ZSLkzGdPnf3m6wCH3HM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = MusicPlayerFull;\nexport default MusicPlayerFull;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicPlayerFull\");","map":{"version":3,"sources":["/Users/fanyukun/Documents/react/indielog/src/components/MusicPlayerFull/index.js"],"names":["useState","Container","Nav","NavLogo","BodyContainer","Library","Song","SongInfo","ControlPanel","FontAwesome","SongName","AuthorName","ImgDiv","Slider","Buttons","Track","AnimateTrack","InputRange","SongCurrentTime","SongFullTime","FontAwesomeControl","ToggleButton","BgFilter","ButtonGroup","LibrarySongDiv","LibrarySongDesc","LibrarySongName","LibrarySongAuthorName","LibraryImgDiv","faPause","faPlay","faTimes","faVolumeUp","faChevronRight","faChevronLeft","faUndo","faToggleOff","faToggleOn","faCompressAlt","useDispatch","useSelector","setSongs","setCurrentSong","setSound","setIsPlaying","setMode","setSongPlayingInfo","setLoop","MusicPlayerFull","audioRef","dispatch","animationPercentage","setAnimationPercentage","mode","store","playerControl","isPlaying","songs","song","currentSong","songPlayingInfo","sound","loop","getTime","time","Math","floor","slice","playSongHandler","current","pause","play","dragHandler","e","currentTime","target","value","skipTrackHandler","direction","currentIndex","findIndex","id","length","volumeToggler","mute","volume","prevVolume","volumeHandler","songSelectHandler","cover","map","name","artist","duration"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport {\n  Container,\n  Nav,\n  NavLogo,\n  BodyContainer,\n  Library,\n  Song,\n  SongInfo,\n  ControlPanel,\n  FontAwesome,\n  SongName,\n  AuthorName,\n  ImgDiv,\n  Slider,\n  Buttons,\n  Track,\n  AnimateTrack,\n  InputRange,\n  SongCurrentTime,\n  SongFullTime,\n  FontAwesomeControl,\n  ToggleButton,\n  BgFilter,\n  ButtonGroup,\n  LibrarySongDiv,\n  LibrarySongDesc,\n  LibrarySongName,\n  LibrarySongAuthorName,\n  LibraryImgDiv\n} from './MusicPlayerFullElements.js'\nimport {\n  faPause,\n  faPlay,\n  faTimes,\n  faVolumeUp,\n  faChevronRight,\n  faChevronLeft,\n  faUndo,\n  faToggleOff,\n  faToggleOn,\n  faCompressAlt\n} from '@fortawesome/free-solid-svg-icons'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSongs, setCurrentSong } from \"../../redux/reducers/songReducer\";\nimport { setSound, setIsPlaying, setMode, setSongPlayingInfo, setLoop } from \"../../redux/reducers/playerControlReducer\"\n\n\nconst MusicPlayerFull = ({ audioRef }) => {\n  const dispatch = useDispatch()\n  const [animationPercentage, setAnimationPercentage] = useState(50)\n  const mode = useSelector((store) => store.playerControl.mode)\n  const isPlaying = useSelector((store) => store.playerControl.isPlaying)\n  const songs = useSelector((store) => store.song.songs)\n  const currentSong = useSelector((store) => store.song.currentSong)\n  const songPlayingInfo = useSelector((store) => store.playerControl.songPlayingInfo)\n  const sound = useSelector((store) => store.playerControl.sound)\n  const loop = useSelector((store) => store.playerControl.loop)\n\n  const getTime = (time) => {\n    return(\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    )\n  }\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause()\n      dispatch(setIsPlaying(!isPlaying))\n    } else {\n      audioRef.current.play()\n      dispatch(setIsPlaying(!isPlaying))\n    }\n  }\n\n  const dragHandler = (e) => {\n    audioRef.current.currentTime = e.target.value\n    dispatch(setSongPlayingInfo({...songPlayingInfo, currentTime: e.target.value}))\n  }\n\n  const skipTrackHandler = async (direction) => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id)\n    if(direction === 'skip-forward'){\n      await dispatch(setCurrentSong(songs[(currentIndex + 1) % songs.length]))\n    }\n    if(direction === 'skip-back'){\n      if((currentIndex - 1) % songs.length === -1){\n        await dispatch(setCurrentSong(songs[songs.length-1]))\n        if (isPlaying) audioRef.current.play()\n        return\n      }\n      await dispatch(setCurrentSong(songs[(currentIndex - 1) % songs.length]))\n    }\n    if (isPlaying) audioRef.current.play()\n  }\n\n  const volumeToggler = () => {\n    if(!sound.mute){\n      dispatch(setSound({ ...sound, mute: true, volume: 0 }))\n    } else {\n      dispatch(setSound({ ...sound, mute: false, volume: sound.prevVolume}))\n    }\n  }\n\n  const volumeHandler = (e) => {\n    if(e.target.value == 0) {\n      dispatch(setSound({ ...sound, mute:true, volume: e.target.value}))\n    } else {\n      dispatch(setSound({ ...sound, mute:false, volume: e.target.value, prevVolume: e.target.value}))\n    }\n    audioRef.current.volume = e.target.value\n  }\n\n  const songSelectHandler = async (song) => {\n    await dispatch(setCurrentSong(song))\n    if (isPlaying) audioRef.current.play()\n  }\n\n  return (\n    <>\n      <Container bgImg={currentSong.cover}>\n        <Nav>\n          <NavLogo to='/'>Indielog</NavLogo>\n          <ButtonGroup>\n            <FontAwesome onClick={() => dispatch(setMode(1))} size='2x' icon={faCompressAlt}/>\n            <FontAwesome onClick={() => dispatch(setMode(0))} size='2x' icon={faTimes} />\n          </ButtonGroup>\n          <ToggleButton size='2x' icon={(mode===3) ? faToggleOn : faToggleOff } onClick={() => dispatch(setMode((mode === 3) ? 2 : 3))}/>\n        </Nav>\n        <BodyContainer>\n          <Library mode={mode}>\n            {songs.map(song => {\n              return (\n                <LibrarySongDiv key={song.id} onClick={() => songSelectHandler(song)} active={song.id === currentSong.id}>\n                  <LibraryImgDiv>\n                    <img src={song.cover}/>\n                  </LibraryImgDiv>\n                  <LibrarySongDesc>\n                    <LibrarySongName>{song.name}</LibrarySongName>\n                    <LibrarySongAuthorName>{song.artist}</LibrarySongAuthorName>\n                  </LibrarySongDesc>\n                </LibrarySongDiv>\n              )\n            })}\n          </Library>\n          <Song mode={mode}>\n            <SongInfo>\n              <ImgDiv mode={mode}><img src={currentSong.cover}/></ImgDiv>\n              <SongName>{currentSong.name}</SongName>\n              <AuthorName>{currentSong.artist}</AuthorName>\n            </SongInfo>\n            <ControlPanel>\n              <Slider>\n                <SongCurrentTime>{getTime(songPlayingInfo.currentTime)}</SongCurrentTime>\n                <Track>\n                  <InputRange min={0}\n                    min={0}\n                    max={songPlayingInfo.duration}\n                    value={songPlayingInfo.currentTime}\n                    onChange={dragHandler}\n                    type=\"range\"\n                  />\n                  <AnimateTrack animationPercentage={songPlayingInfo.animationPercentage} />\n                </Track>\n                <SongFullTime>{getTime(songPlayingInfo.duration || 0)}</SongFullTime>\n              </Slider>\n              <Buttons>\n                <FontAwesomeControl onClick={() => dispatch(setLoop(!loop)) } size='1x' icon={faUndo} />\n                <FontAwesomeControl onClick={() => {skipTrackHandler('skip-back')}} size='1x' icon={faChevronLeft} />\n                <FontAwesomeControl onClick={playSongHandler} size='2x' icon={isPlaying ? faPause : faPlay} />\n                <FontAwesomeControl onClick={() => {skipTrackHandler('skip-forward')}} size='1x' icon={faChevronRight} />\n                <FontAwesomeControl size='1x' icon={faVolumeUp} />\n              </Buttons>\n            </ControlPanel>\n          </Song>\n        </BodyContainer>\n      </Container>\n    </>\n  )\n}\n\nexport default MusicPlayerFull\n"]},"metadata":{},"sourceType":"module"}