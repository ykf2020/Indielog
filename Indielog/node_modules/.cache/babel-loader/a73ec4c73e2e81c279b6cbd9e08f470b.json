{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/storage';\nimport config from './config.js';\nfirebase.initializeApp(config);\nconst db = firebase.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\nconst usersDb = db.collection('users');\nconst postsDb = db.collection('posts');\nconst songsDb = db.collection('songs');\nconst topicsDb = db.collection('topics'); // auth\n\nexport const signUp = (email, password, handleSuccess, handleErrMessage) => {\n  auth.createUserWithEmailAndPassword(email, password).then(signUpResult => {\n    usersDb.doc(signUpResult.user.uid).set({\n      email,\n      photoURL: '',\n      displayName: '',\n      introduction: '',\n      createdAt: firebase.firestore.Timestamp.now()\n    }).then(() => {\n      handleSuccess();\n    }).catch(err => {\n      switch (err.code) {\n        case \"auth/email-already-in-use\":\n          handleErrMessage('信箱已存在');\n          break;\n\n        case \"auth/invalid-email\":\n          handleErrMessage('信箱格式錯誤');\n          break;\n\n        case \"auth/weak-password\":\n          handleErrMessage('密碼強度不足');\n          break;\n\n        default:\n          handleErrMessage(err.code);\n      }\n    });\n  });\n};\nexport const signIn = (email, password, handleSuccess, handleErrMessage) => {\n  auth.signInWithEmailAndPassword(email, password).then(() => {\n    handleSuccess();\n  }).catch(err => {\n    switch (err.code) {\n      case \"auth/invalid-email\":\n        handleErrMessage('信箱格式錯誤');\n        break;\n\n      case \"auth/user-not-found\":\n        handleErrMessage('信箱不存在');\n        break;\n\n      case \"auth/wrong-password\":\n        handleErrMessage('密碼錯誤');\n        break;\n\n      default:\n        handleErrMessage(err.code);\n    }\n  });\n};\nexport const signOut = () => {\n  auth.signOut();\n};\nexport const checkUserStatus = handleUser => {\n  auth.onAuthStateChanged(user => {\n    if (user) {\n      handleUser({\n        uid: user.uid,\n        displayName: user.displayName,\n        email: user.email,\n        photoURL: user.photoURL\n      });\n    } else {\n      handleUser(null);\n    }\n  });\n};\nexport const forgetPassword = email => {\n  return auth.sendPasswordResetEmail(email);\n};\nexport const getUserInfoOnSnapshot = (userId, handleUser) => {\n  usersDb.doc(userId).onSnapshot(userSnapShot => {\n    handleUser(userSnapShot.data());\n  });\n};\nexport const updatePassword = (userEmail, oldPassword, newPassword, handleSuccess, handleErr) => {\n  const credential = firebase.auth.EmailAuthProvider.credential(userEmail, oldPassword);\n  firebase.auth().currentUser.reauthenticateWithCredential(credential).then(() => {\n    firebase.auth().currentUser.updatePassword(newPassword).then(() => {\n      handleSuccess();\n    }).catch(err => {\n      handleErr('新密碼錯誤');\n    });\n  }).catch(err => {\n    handleErr('原密碼錯誤');\n  });\n};\nexport const updateDisplayName = (userId, newDisplayName, handleSuccess) => {\n  firebase.auth().currentUser.updateProfile({\n    newDisplayName\n  }).then(() => {\n    usersDb.doc(userId).update({\n      displayName: newDisplayName\n    }).then(() => {\n      handleSuccess();\n    });\n  });\n};\nexport const updateIntroduction = (userId, newIntroduction, handleSuccess) => {\n  usersDb.doc(userId).update({\n    introduction: newIntroduction\n  }).then(() => {\n    handleSuccess();\n  });\n}; // firestore\n// topics\n\nexport const getTopics = handleTopics => {\n  topicsDb.get().then(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handleTopics(data);\n  });\n};\nexport const getTopicsAndSetDefaultTopic = (handleTopics, handleCurrentTopic) => {\n  topicsDb.get().then(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handleTopics(data);\n    handleCurrentTopic(data[0].name);\n  });\n}; // posts\n\nexport const getPost = (postId, handlePost) => {\n  postsDb.doc(postId).get().then(docSnapShot => {\n    handlePost(docSnapShot.data());\n  });\n};\nexport const getPostWithAuthorInfo = (postId, handlePost, handleAuthorInfo) => {\n  postsDb.doc(postId).onSnapshot(docSnapShot => {\n    const data = docSnapShot.data();\n    handlePost(data);\n    usersDb.doc(data.author.uid).get().then(userSnapShot => {\n      handleAuthorInfo(userSnapShot.data());\n    });\n  });\n};\nexport const getSeedPosts = (topic, limit, handlePosts) => {\n  if (!topic) {\n    postsDb.orderBy('createdAt', 'desc').limit(limit).get().then(collectionSnapShot => {\n      const data = collectionSnapShot.docs.map(doc => {\n        const id = doc.id;\n        return { ...doc.data(),\n          id\n        };\n      });\n      handlePosts(data);\n    });\n  } else {\n    postsDb.orderBy('createdAt', 'desc').where('topic', '==', topic).limit(limit).get().then(collectionSnapShot => {\n      const data = collectionSnapShot.docs.map(doc => {\n        const id = doc.id;\n        return { ...doc.data(),\n          id\n        };\n      });\n      handlePosts(data);\n    });\n  }\n};\nexport const getChangePagePosts = (topic, limit, handlePosts, lastRefPlace) => {\n  if (!topic) {\n    postsDb.orderBy('createdAt', 'desc').get().then(collectionSnapShot => {\n      const ref = collectionSnapShot.docs[lastRefPlace];\n      postsDb.orderBy('createdAt', 'desc').startAt(ref).limit(limit).get().then(snapshot => {\n        const data = snapshot.docs.map(doc => {\n          const id = doc.id;\n          return { ...doc.data(),\n            id\n          };\n        });\n        handlePosts(data);\n      });\n    });\n  } else {\n    postsDb.orderBy('createdAt', 'desc').where('topic', '==', topic).get().then(collectionSnapShot => {\n      const ref = collectionSnapShot.docs[lastRefPlace];\n      postsDb.orderBy('createdAt', 'desc').limit(limit).startAt(ref).get().then(snapshot => {\n        const data = snapshot.docs.map(doc => {\n          const id = doc.id;\n          return { ...doc.data(),\n            id\n          };\n        });\n        handlePosts(data);\n      });\n    });\n  }\n};\nexport const getPostsAmount = (topic, limit, handlePosts) => {\n  if (!topic) {\n    postsDb.get().then(collectionSnapShot => {\n      const amount = collectionSnapShot.size;\n      const pages = amount % limit === 0 ? amount / limit : Math.ceil(amount / limit);\n      handlePosts(pages);\n    });\n  } else {\n    postsDb.where('topic', '==', topic).get().then(collectionSnapShot => {\n      const amount = collectionSnapShot.size;\n      const pages = amount % limit === 0 ? amount / limit : Math.ceil(amount / limit);\n      handlePosts(pages);\n    });\n  }\n};\nexport const addNewPost = (image, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc();\n  const imageRef = storage.ref('post-images/' + documentRef.id);\n  const metadata = {\n    contentType: image.type\n  };\n  imageRef.put(image, metadata).then(() => {\n    imageRef.getDownloadURL().then(imageUrl => {\n      documentRef.set({\n        title: postInfo.title,\n        content: postInfo.content,\n        topic: postInfo.topic,\n        createdAt: firebase.firestore.Timestamp.now(),\n        author: {\n          uid: postInfo.userId\n        },\n        imageUrl\n      });\n      handleSuccess(documentRef.id);\n    });\n  });\n};\nexport const updatePost = (postId, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc(postId);\n  documentRef.update({\n    title: postInfo.title,\n    content: postInfo.content,\n    topic: postInfo.topic,\n    updatedAt: firebase.firestore.Timestamp.now(),\n    author: {\n      uid: postInfo.userId\n    }\n  }).then(() => {\n    handleSuccess(postId);\n  });\n};\nexport const updatePostWithNewPic = (postId, image, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc(postId);\n  const imageRef = storage.ref('post-images/' + documentRef.id);\n  const metadata = {\n    contentType: image.type\n  };\n  imageRef.put(image, metadata).then(() => {\n    imageRef.getDownloadURL().then(imageUrl => {\n      documentRef.update({\n        title: postInfo.title,\n        content: postInfo.content,\n        topic: postInfo.topic,\n        updatedAt: firebase.firestore.Timestamp.now(),\n        author: {\n          uid: postInfo.userId\n        },\n        imageUrl\n      });\n      handleSuccess(documentRef.id);\n    });\n  });\n};\nexport const getMyPostsOnSnapshot = (userId, handlePosts) => {\n  postsDb.where('author.uid', '==', userId).onSnapshot(collectionSnapshot => {\n    const data = collectionSnapshot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handlePosts(data);\n  });\n};\nexport const togglePostLiked = (isLiked, postId, userId) => {\n  if (isLiked) {\n    var _firebase$firestore$F;\n\n    postsDb.doc(postId).update({\n      likedBy: (_firebase$firestore$F = firebase.firestore.FieldValue) === null || _firebase$firestore$F === void 0 ? void 0 : _firebase$firestore$F.arrayRemove(userId)\n    });\n  } else {\n    var _firebase$firestore$F2;\n\n    postsDb.doc(postId).update({\n      likedBy: (_firebase$firestore$F2 = firebase.firestore.FieldValue) === null || _firebase$firestore$F2 === void 0 ? void 0 : _firebase$firestore$F2.arrayUnion(userId)\n    });\n  }\n};\nexport const getLikedPosts = (userId, handlePosts) => {\n  postsDb.where('likedBy', 'array-contains', userId).get().then(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handlePosts(data);\n  });\n};\nexport const deletePost = postId => {\n  postsDb.doc(postId).delete().then(() => {\n    alert('已刪除文章');\n  });\n}; // authors\n\nexport const getAuthorInfo = (authorId, handleAuthorInfo) => {\n  usersDb.doc(authorId).get().then(userSnapShot => {\n    handleAuthorInfo(userSnapShot.data());\n  });\n}; // comments\n\nexport const getCommentsOnSnapshot = (area, id, handleComments) => {\n  db.collection(area).doc(id).collection('comments').orderBy('createdAt', 'asc').onSnapshot(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return {\n        id,\n        authorUid: doc.data().authorUid,\n        content: doc.data().content,\n        createdAt: doc.data().createdAt\n      };\n    });\n    handleComments(data);\n  });\n};\nexport const addNewComment = (area, id, commentContent, authorId) => {\n  return db.collection(area).doc(id).collection('comments').doc().set({\n    content: commentContent,\n    createdAt: firebase.firestore.Timestamp.now(),\n    authorUid: authorId\n  });\n}; // songs\n\nexport const getLikedSongs = (userId, handleSongs) => {\n  songsDb.where('likedBy', 'array-contains', userId).get().then(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handleSongs(data);\n  });\n};\nexport const getSongsOnSnapShot = handleSongs => {\n  songsDb.onSnapshot(collectionSnapShot => {\n    const data = collectionSnapShot.docs.map(doc => {\n      const id = doc.id;\n      return { ...doc.data(),\n        id\n      };\n    });\n    handleSongs(data);\n  });\n};\nexport const toggleSongLiked = (isLiked, songId, userId) => {\n  if (isLiked) {\n    var _firebase$firestore$F3;\n\n    songsDb.doc(songId).update({\n      likedBy: (_firebase$firestore$F3 = firebase.firestore.FieldValue) === null || _firebase$firestore$F3 === void 0 ? void 0 : _firebase$firestore$F3.arrayRemove(userId)\n    });\n  } else {\n    var _firebase$firestore$F4;\n\n    songsDb.doc(songId).update({\n      likedBy: (_firebase$firestore$F4 = firebase.firestore.FieldValue) === null || _firebase$firestore$F4 === void 0 ? void 0 : _firebase$firestore$F4.arrayUnion(userId)\n    });\n  }\n};\nexport const getSongOnSnapShot = (songId, handleSong) => {\n  songsDb.doc(songId).onSnapshot(docSnapshot => handleSong(docSnapshot.data()));\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/fanyukun/Documents/react/Indielog/Indielog/src/utils/firebase.js"],"names":["firebase","config","initializeApp","db","firestore","auth","storage","usersDb","collection","postsDb","songsDb","topicsDb","signUp","email","password","handleSuccess","handleErrMessage","createUserWithEmailAndPassword","then","signUpResult","doc","user","uid","set","photoURL","displayName","introduction","createdAt","Timestamp","now","catch","err","code","signIn","signInWithEmailAndPassword","signOut","checkUserStatus","handleUser","onAuthStateChanged","forgetPassword","sendPasswordResetEmail","getUserInfoOnSnapshot","userId","onSnapshot","userSnapShot","data","updatePassword","userEmail","oldPassword","newPassword","handleErr","credential","EmailAuthProvider","currentUser","reauthenticateWithCredential","updateDisplayName","newDisplayName","updateProfile","update","updateIntroduction","newIntroduction","getTopics","handleTopics","get","collectionSnapShot","docs","map","id","getTopicsAndSetDefaultTopic","handleCurrentTopic","name","getPost","postId","handlePost","docSnapShot","getPostWithAuthorInfo","handleAuthorInfo","author","getSeedPosts","topic","limit","handlePosts","orderBy","where","getChangePagePosts","lastRefPlace","ref","startAt","snapshot","getPostsAmount","amount","size","pages","Math","ceil","addNewPost","image","postInfo","documentRef","imageRef","metadata","contentType","type","put","getDownloadURL","imageUrl","title","content","updatePost","updatedAt","updatePostWithNewPic","getMyPostsOnSnapshot","collectionSnapshot","togglePostLiked","isLiked","likedBy","FieldValue","arrayRemove","arrayUnion","getLikedPosts","deletePost","delete","alert","getAuthorInfo","authorId","getCommentsOnSnapshot","area","handleComments","authorUid","addNewComment","commentContent","getLikedSongs","handleSongs","getSongsOnSnapShot","toggleSongLiked","songId","getSongOnSnapShot","handleSong","docSnapshot"],"mappings":"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","sourcesContent":["import firebase from 'firebase/compat/app'\nimport 'firebase/compat/auth'\nimport 'firebase/compat/firestore'\nimport 'firebase/compat/storage'\nimport config from './config.js'\n\nfirebase.initializeApp(config);\n\nconst db = firebase.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage()\nconst usersDb = db.collection('users')\nconst postsDb = db.collection('posts')\nconst songsDb = db.collection('songs')\nconst topicsDb = db.collection('topics')\n\n\n// auth\nexport const signUp = (email, password, handleSuccess, handleErrMessage) => {\n  auth.createUserWithEmailAndPassword(email, password).then((signUpResult) => {\n    usersDb.doc(signUpResult.user.uid).set({\n      email,\n      photoURL: '',\n      displayName: '',\n      introduction: '',\n      createdAt: firebase.firestore.Timestamp.now()\n    }).then(() => {\n      handleSuccess()\n    }).catch((err) => {\n      switch(err.code) {\n        case \"auth/email-already-in-use\":\n          handleErrMessage('信箱已存在')\n          break\n        case \"auth/invalid-email\":\n          handleErrMessage('信箱格式錯誤')\n          break\n        case \"auth/weak-password\":\n          handleErrMessage('密碼強度不足')\n          break\n        default:\n          handleErrMessage(err.code)\n      }\n    })\n  })\n}\n\nexport const signIn = (email, password, handleSuccess, handleErrMessage) => {\n  auth.signInWithEmailAndPassword(email, password).then(() => {\n    handleSuccess()\n  }).catch((err) => {\n    switch(err.code) {\n      case \"auth/invalid-email\":\n        handleErrMessage('信箱格式錯誤')\n        break\n      case \"auth/user-not-found\":\n        handleErrMessage('信箱不存在')\n        break\n      case \"auth/wrong-password\":\n        handleErrMessage('密碼錯誤')\n        break\n      default:\n        handleErrMessage(err.code)\n    }\n  })\n}\n\nexport const signOut = () => {\n  auth.signOut()\n}\n\nexport const checkUserStatus = (handleUser) => {\n  auth.onAuthStateChanged((user) => {\n    if(user) {\n      handleUser({\n        uid: user.uid,\n        displayName: user.displayName,\n        email: user.email,\n        photoURL: user.photoURL\n      })\n    } else {\n      handleUser(null)\n    }\n  })\n}\n\nexport const forgetPassword = (email) => {\n  return auth.sendPasswordResetEmail(email)\n}\n\n\nexport const getUserInfoOnSnapshot = (userId, handleUser) => {\n  usersDb.doc(userId).onSnapshot((userSnapShot) => {\n    handleUser(userSnapShot.data())\n  })\n}\n\nexport const updatePassword = (userEmail, oldPassword, newPassword, handleSuccess, handleErr) => {\n  const credential = firebase.auth.EmailAuthProvider.credential(userEmail, oldPassword)\n  firebase.auth().currentUser.reauthenticateWithCredential(credential).then(() => {\n    firebase.auth().currentUser.updatePassword(newPassword).then(() => {\n      handleSuccess()\n    }).catch((err) => {\n      handleErr('新密碼錯誤')\n    })\n  }).catch((err) => {\n    handleErr('原密碼錯誤')\n  })\n}\n\nexport const updateDisplayName = (userId, newDisplayName, handleSuccess) => {\n  firebase.auth().currentUser.updateProfile({\n    newDisplayName,\n  }).then(() => {\n    usersDb.doc(userId).update({\n        displayName: newDisplayName,\n      }).then(() => {\n        handleSuccess()\n      })\n  })\n}\n\nexport const updateIntroduction = (userId, newIntroduction, handleSuccess) => {\n  usersDb.doc(userId).update({\n    introduction: newIntroduction\n  }).then(() => {\n    handleSuccess()\n  })\n}\n\n// firestore\n// topics\nexport const getTopics = (handleTopics) => {\n  topicsDb.get().then((collectionSnapShot) => {\n    const data = collectionSnapShot.docs.map((doc) => {\n      const id = doc.id\n      return {...doc.data(),id}\n    })\n    handleTopics(data)\n  })\n}\n\nexport const getTopicsAndSetDefaultTopic = (handleTopics, handleCurrentTopic) => {\n  topicsDb.get().then((collectionSnapShot) => {\n    const data = collectionSnapShot.docs.map((doc) => {\n      const id = doc.id\n      return {...doc.data(),id}\n    })\n    handleTopics(data)\n    handleCurrentTopic(data[0].name)\n  })\n}\n\n// posts\nexport const getPost = (postId, handlePost) => {\n  postsDb.doc(postId).get().then((docSnapShot) => {\n    handlePost(docSnapShot.data())\n  })\n}\n\nexport const getPostWithAuthorInfo = (postId, handlePost, handleAuthorInfo) => {\n  postsDb.doc(postId).onSnapshot((docSnapShot) => {\n    const data = docSnapShot.data()\n    handlePost(data)\n    usersDb.doc(data.author.uid).get().then((userSnapShot) => {\n      handleAuthorInfo(userSnapShot.data())\n    })\n  })\n}\n\nexport const getSeedPosts = (topic, limit, handlePosts) => {\n  if(!topic) {\n    postsDb.orderBy('createdAt','desc').limit(limit).get().then((collectionSnapShot) => {\n      const data = collectionSnapShot.docs.map((doc) => {\n        const id = doc.id\n        return {...doc.data(),id}\n      })\n      handlePosts(data)\n    })\n  } else {\n    postsDb.orderBy('createdAt','desc').where('topic','==',topic).limit(limit).get().then((collectionSnapShot) => {\n      const data = collectionSnapShot.docs.map((doc) => {\n        const id = doc.id\n        return {...doc.data(),id}\n      })\n      handlePosts(data)\n    })\n  }\n}\n\nexport const getChangePagePosts = (topic, limit, handlePosts, lastRefPlace) => {\n  if(!topic) {\n    postsDb.orderBy('createdAt','desc').get().then((collectionSnapShot) => {\n      const ref = collectionSnapShot.docs[lastRefPlace]\n      postsDb.orderBy('createdAt','desc').startAt(ref).limit(limit).get().then(snapshot => {\n        const data = snapshot.docs.map((doc) => {\n          const id = doc.id\n          return {...doc.data(),id}\n        })\n        handlePosts(data)\n      })\n    })\n  } else {\n    postsDb.orderBy('createdAt','desc').where('topic','==',topic).get().then((collectionSnapShot) => {\n      const ref = collectionSnapShot.docs[lastRefPlace]\n      postsDb.orderBy('createdAt','desc').limit(limit).startAt(ref).get().then(snapshot => {\n        const data = snapshot.docs.map((doc) => {\n          const id = doc.id\n          return {...doc.data(),id}\n        })\n        handlePosts(data)\n      })\n    })\n  }\n}\n\nexport const getPostsAmount = (topic, limit, handlePosts) => {\n  if(!topic) {\n    postsDb.get().then(collectionSnapShot => {\n      const amount = collectionSnapShot.size\n      const pages = amount % limit === 0 ? amount / limit : Math.ceil(amount / limit);\n      handlePosts(pages)\n    })\n  } else {\n    postsDb.where('topic','==',topic).get().then(collectionSnapShot => {\n      const amount = collectionSnapShot.size\n      const pages = amount % limit === 0 ? amount / limit : Math.ceil(amount / limit);\n      handlePosts(pages)\n    })\n  }\n\n}\n\nexport const addNewPost = (image, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc()\n  const imageRef = storage.ref('post-images/' + documentRef.id)\n  const metadata = {\n    contentType: image.type\n  }\n\n  imageRef.put(image, metadata).then(() => {\n    imageRef.getDownloadURL().then((imageUrl) => {\n      documentRef.set({\n        title: postInfo.title,\n        content: postInfo.content,\n        topic: postInfo.topic,\n        createdAt: firebase.firestore.Timestamp.now(),\n        author: {\n          uid: postInfo.userId,\n        },\n        imageUrl\n      })\n      handleSuccess(documentRef.id)\n    })\n  })\n}\n\nexport const updatePost = (postId, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc(postId)\n  documentRef.update({\n    title: postInfo.title,\n    content: postInfo.content,\n    topic: postInfo.topic,\n    updatedAt: firebase.firestore.Timestamp.now(),\n    author: {\n      uid: postInfo.userId,\n    }\n    }).then(() => {\n      handleSuccess(postId)\n    })\n}\n\nexport const updatePostWithNewPic = (postId, image, postInfo, handleSuccess) => {\n  const documentRef = postsDb.doc(postId)\n  const imageRef = storage.ref('post-images/' + documentRef.id)\n  const metadata = {\n    contentType: image.type\n  }\n\n  imageRef.put(image, metadata).then(() => {\n    imageRef.getDownloadURL().then((imageUrl) => {\n      documentRef.update({\n        title: postInfo.title,\n        content: postInfo.content,\n        topic: postInfo.topic,\n        updatedAt: firebase.firestore.Timestamp.now(),\n        author: {\n          uid: postInfo.userId,\n        },\n        imageUrl\n      })\n      handleSuccess(documentRef.id)\n    })\n  })\n}\n\nexport const getMyPostsOnSnapshot = (userId, handlePosts) => {\n  postsDb.where('author.uid','==', userId).onSnapshot((collectionSnapshot) => {\n    const data = collectionSnapshot.docs.map((doc) => {\n      const id = doc.id\n      return { ...doc.data(), id }\n    })\n    handlePosts(data)\n  })\n}\n\nexport const togglePostLiked = (isLiked, postId, userId) => {\n  if(isLiked) {\n    postsDb.doc(postId).update({\n      likedBy: firebase.firestore.FieldValue?.arrayRemove(userId)\n    })\n  } else {\n    postsDb.doc(postId).update({\n      likedBy: firebase.firestore.FieldValue?.arrayUnion(userId)\n    })\n  }\n}\n\nexport const getLikedPosts = (userId, handlePosts) => {\n  postsDb.where('likedBy', 'array-contains', userId).get().then((collectionSnapShot) => {\n    const data = collectionSnapShot.docs.map((doc) => {\n      const id = doc.id\n      return {...doc.data(),id}\n    })\n    handlePosts(data)\n  })\n}\n\nexport const deletePost = (postId) => {\n  postsDb.doc(postId).delete().then(() => {\n    alert('已刪除文章')\n  })\n}\n\n// authors\nexport const getAuthorInfo = (authorId, handleAuthorInfo) => {\n  usersDb.doc(authorId).get().then((userSnapShot) => {\n    handleAuthorInfo(userSnapShot.data())\n  })\n}\n\n// comments\nexport const getCommentsOnSnapshot = (area, id, handleComments) => {\n  db.collection(area).doc(id).collection('comments').orderBy('createdAt','asc').onSnapshot((collectionSnapShot) => {\n     const data = collectionSnapShot.docs.map((doc) => {\n       const id = doc.id\n       return {\n         id,\n         authorUid: doc.data().authorUid,\n         content: doc.data().content,\n         createdAt: doc.data().createdAt\n       }\n     })\n     handleComments(data)\n  })\n}\n\nexport const addNewComment = (area, id, commentContent, authorId) => {\n  return db.collection(area).doc(id).collection('comments').doc().set({\n    content: commentContent,\n    createdAt: firebase.firestore.Timestamp.now(),\n    authorUid: authorId,\n  })\n}\n\n// songs\nexport const getLikedSongs = (userId, handleSongs) => {\n  songsDb.where('likedBy', 'array-contains', userId).get().then((collectionSnapShot) => {\n    const data = collectionSnapShot.docs.map((doc) => {\n      const id = doc.id\n      return {...doc.data(),id}\n    })\n    handleSongs(data)\n  })\n}\n\nexport const getSongsOnSnapShot = (handleSongs) => {\n  songsDb.onSnapshot((collectionSnapShot) => {\n    const data = collectionSnapShot.docs.map((doc) => {\n      const id = doc.id\n      return {...doc.data(),id}\n    })\n    handleSongs(data)\n  })\n}\n\nexport const toggleSongLiked = (isLiked, songId, userId) => {\n  if(isLiked) {\n    songsDb.doc(songId).update({\n      likedBy: firebase.firestore.FieldValue?.arrayRemove(userId)\n    })\n  } else {\n    songsDb.doc(songId).update({\n      likedBy: firebase.firestore.FieldValue?.arrayUnion(userId)\n    })\n  }\n}\n\nexport const getSongOnSnapShot = (songId, handleSong) => {\n  songsDb.doc(songId).onSnapshot((docSnapshot) => handleSong(docSnapshot.data()))\n}\n\nexport default firebase\n"]},"metadata":{},"sourceType":"module"}